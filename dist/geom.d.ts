export declare type Point4 = [number, number, number, number];
export declare type Point3 = [number, number, number];
export declare type Point2 = [number, number];
export declare type Vector4 = [number, number, number, number];
export declare type Vector3 = [number, number, number];
export declare type Vector2 = [number, number];
export declare type Rect = [number, number, number, number];
export declare type LonLat = [number, number];
export declare type Columns = [Vector4, Vector4, Vector4, Vector4];
export declare type Rows = [Vector4, Vector4, Vector4, Vector4];
export declare class Matrix4 {
    private _data;
    constructor(data?: number[] | Float32Array);
    static identity(): Matrix4;
    static fromColumns(cols: Columns): Matrix4;
    static perspective(aspect: number, fov: number, near: number, far: number): Matrix4;
    static rotation(x: number, y: number, z: number): Matrix4;
    static translation(x: number, y: number, z: number): Matrix4;
    static scaling(x: number, y?: number, z?: number): Matrix4;
    static lookAt(from: Point3, to: Point3): Matrix4;
    clone(): Matrix4;
    toArray(): number[];
    at(col: number, row: number): number;
    column(axis: number): Vector4;
    row(axis: number): Vector4;
    get columns(): Columns;
    get rows(): Rows;
    multiply(other: Matrix4): Matrix4;
    multiplyVector4(vec: Vector4): Vector4;
    transformPoint3(point: Point3): Point3;
    inverse(): Matrix4;
    extractTranslation(): Matrix4;
    extractScaling(): Matrix4;
    extractRotation(): Matrix4;
    eulerAngles(): Vector3;
}
export declare function scaleVector4(vec: Vector4, scale: number): Vector4;
export declare function addVector4(vec: Vector4, other: Vector4): Vector4;
export declare function multiplyVector4(vec: Vector4, other: Vector4): Vector4;
export declare function scaleVector3(vec: Vector3, scale: number): Vector3;
export declare function addVector3(vec: Vector3, other: Vector3): Vector3;
export declare function multiplyVector3(vec: Vector3, other: Vector3): Vector3;
export declare function cross(p0: Vector3, p1: Vector3): Vector3;
export declare function dot(p0: Vector3, p1: Vector3): number;
export declare function normalize(v: Vector3): Vector3;
export declare function magnitude(v: Vector3): number;
export declare function raySphereIntersection(center: Point3, radius: number, origin: Point3, direction: Vector3): Point3 | null;
export declare function pointToLonLat(point: Point3): LonLat;
